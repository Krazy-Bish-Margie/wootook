<?php

namespace WootookUnit\Core\DependencyInjection;

/**
 * Test class for Wootook\Core\BaseObject.
 * Generated by PHPUnit on 2011-09-01 at 11:24:52.
 */
class RegistryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \Wootook\Core\App\App
     */
    protected $_app;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_app = $this->getMock('Wootook\\Core\\App\\App', array('__construct'), array(''));
    }

    public function testAddInstance()
    {
        $object = new \Wootook\Core\DependencyInjection\Registry($this->_app);

        $this->assertAttributeEmpty('_instances', $object);

        $instance = new \StdClass();
        $object->add('testing-instance', $instance);

        $expected = array('testing-instance' => $instance);
        $this->assertAttributeEquals($expected, '_instances', $object);
    }

    public function testAddInstanceWhileAlreadyExists()
    {
        $object = new \Wootook\Core\DependencyInjection\Registry($this->_app);

        $this->assertAttributeEmpty('_instances', $object);

        $instanceOne = new \StdClass();
        $object->add('testing-instance', $instanceOne);

        $this->setExpectedException('Wootook\\Core\\Exception\\RuntimeException');
        $instanceTwo = new \StdClass();
        $object->add('testing-instance', $instanceTwo);
    }

    public function testSetInstance()
    {
        $object = new \Wootook\Core\DependencyInjection\Registry($this->_app);

        $this->assertAttributeEmpty('_instances', $object);

        $instance = new \StdClass();
        $object->set('testing-instance', $instance);

        $expected = array('testing-instance' => $instance);
        $this->assertAttributeEquals($expected, '_instances', $object);
    }

    public function testSetInstanceWhileOneIsAlreadyExisting()
    {
        $object = new \Wootook\Core\DependencyInjection\Registry($this->_app);

        $this->assertAttributeEmpty('_instances', $object);

        $instanceOne = new \StdClass();
        $object->set('testing-instance', $instanceOne);
        $expected = array('testing-instance' => $instanceOne);
        $this->assertAttributeEquals($expected, '_instances', $object);

        $this->setExpectedException('Wootook\\Core\\Exception\\BadMethodCallException');
        $instanceTwo = new \StdClass();
        $object->set('testing-instance', $instanceTwo);
    }

    public function testGetInstance()
    {
        $object = new \Wootook\Core\DependencyInjection\Registry($this->_app);

        $this->assertAttributeEmpty('_instances', $object);

        $instance = new \StdClass();
        $object->set('testing-instance', $instance);

        $this->assertSame($instance, $object->get('testing-instance'));
    }

    public function testDeleteInstance()
    {
        $object = new \Wootook\Core\DependencyInjection\Registry($this->_app);

        $this->assertAttributeEmpty('_instances', $object);

        $instanceOne = new \StdClass();
        $object->set('testing-instance', $instanceOne);

        $instanceTwo = new \StdClass();
        $object->set('testing-instance2', $instanceTwo);

        $expected = array('testing-instance' => $instanceOne, 'testing-instance2' => $instanceTwo);
        $this->assertAttributeEquals($expected, '_instances', $object);

        $object->delete('testing-instance2');

        $expected = array('testing-instance' => $instanceOne);
        $this->assertAttributeEquals($expected, '_instances', $object);
    }

    public function testClearAllInstances()
    {
        $object = new \Wootook\Core\DependencyInjection\Registry($this->_app);

        $this->assertAttributeEmpty('_instances', $object);

        $instanceOne = new \StdClass();
        $object->set('testing-instance', $instanceOne);

        $instanceTwo = new \StdClass();
        $object->set('testing-instance2', $instanceTwo);

        $expected = array('testing-instance' => $instanceOne, 'testing-instance2' => $instanceTwo);
        $this->assertAttributeEquals($expected, '_instances', $object);

        $object->clear();

        $this->assertAttributeEquals(array(), '_instances', $object);
    }
}
