<?php

namespace WootookUnit\Core\Base;

use Wootook\Core\Base;

/**
 * Test class for Wootook\Core\BaseObject.
 * Generated by PHPUnit on 2011-09-01 at 11:24:52.
 */
class BaseObjectTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var \Wootook\Core\App\App
     */
    protected $_app;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_app = $this->getMock('Wootook\\Core\\App\\App', array('__construct'), array(''));
    }

    public function testAppMethod()
    {
        $object = new Base\BaseObject($this->_app);

        $this->assertAttributeSame($this->_app, '_app', $object);

        $this->assertSame($this->_app, $object->app());
    }

    public function testSetData()
    {
        $object = new Base\BaseObject($this->_app);

        $this->assertAttributeEmpty('_data', $object);

        $object->setData('test', true);
        $expected = array('test' => true);
        $this->assertAttributeEquals($expected, '_data', $object);

        $object->setData('test', 'testing');
        $expected = array('test' => 'testing');
        $this->assertAttributeEquals($expected, '_data', $object);
    }

    /**
     * @requires testSetData
     */
    public function testGetData()
    {
        $object = new Base\BaseObject($this->_app);

        $object->setData('test', 'testing');

        $this->assertEquals('testing', $object->getData('test'));

        $object->setData('test', true);
        $this->assertTrue($object->getData('test'));

        $this->assertNull($object->getData('testing'));
    }

    /**
     * @requires testSetData
     * @requires testGetData
     */
    public function testGetAllDatas()
    {
        $object = new Base\BaseObject($this->_app);

        $object->setData('test', 'testing');

        $expected = array('test' => 'testing');
        $this->assertEquals($expected, $object->getAllDatas());

        $object->setData('test', true);
        $expected = array('test' => true);
        $this->assertEquals($expected, $object->getAllDatas());
    }

    /**
     * @requires testSetData
     * @requires testGetData
     */
    public function testHasData()
    {
        $object = new Base\BaseObject($this->_app);

        $object->setData('test', 'testing');

        $this->assertTrue($object->hasData('test'));
        $this->assertFalse($object->hasData('testing'));
    }

    /**
     * @requires testSetData
     */
    public function testAddData()
    {
        $object = new Base\BaseObject($this->_app);

        $object->setData('test', 'testing');

        $expected = array(
            'test'     => 'testing',
            'testing'  => true,
            'legacies' => false
            );

        $object->addData(array(
            'testing' => true,
            'legacies' => false
            ));
        $this->assertAttributeEquals($expected, '_data', $object);

        $expected = array(
            'test'     => 'legacies',
            'testing'  => false,
            'legacies' => 'Wootook_Object'
            );

        $object->addData($expected);
        $this->assertAttributeEquals($expected, '_data', $object);
    }

    /**
     * @requires testSetData
     */
    public function testUnsetData()
    {
        $object = new Base\BaseObject($this->_app);

        $object->setData('test', 'testing');
        $object->setData('testing', true);
        $object->setData('removed', 'me!');
        $object->setData('legacies', false);

        $expected = array(
            'test'     => 'testing',
            'testing'  => true,
            'legacies' => false
            );

        $object->unsetData('removed');
        $this->assertAttributeEquals($expected, '_data', $object);
    }

    public function testClearData()
    {
        $object = new Base\BaseObject($this->_app);

        $object->setData('test', 'testing');
        $object->setData('testing', true);
        $object->setData('removed', 'me!');
        $object->setData('legacies', false);

        $expected = array(
            'test'     => 'testing',
            'testing'  => true,
            'legacies' => false
            );

        $object->clearData();
        $this->assertAttributeEmpty('_data', $object);
    }

    /**
     * @requires testSetData
     * @requires testHasData
     */
    public function testOffsetExists()
    {
        $object = new Base\BaseObject($this->_app);

        $object->setData('test', 'testing');

        $this->assertTrue(isset($object['test']));
    }

    /**
     * @requires testSetData
     * @requires testGetData
     */
    public function testOffsetGet()
    {
        $object = new Base\BaseObject($this->_app);

        $object->setData('test', 'testing');

        $this->assertEquals('testing', $object['test']);
    }

    /**
     * @requires testGetData
     * @requires testSetData
     */
    public function testOffsetSet()
    {
        $object = new Base\BaseObject($this->_app);

        $object['test'] = 'testing';

        $this->assertEquals('testing', $object->getData('test'));
    }

    /**
     * @requires testSetData
     * @requires testGetData
     */
    public function testOffsetUnset()
    {
        $object = new Base\BaseObject($this->_app);

        $object->setData('test', 'testing');

        unset($object['test']);

        $this->assertAttributeEmpty('_data', $object);
        $this->assertNull($object->getData('test'));
    }
}
