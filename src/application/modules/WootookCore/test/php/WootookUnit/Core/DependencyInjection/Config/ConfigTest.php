<?php

namespace WootookUnit\Core\DependencyInjection\Config;

/**
 * Test class for Wootook\Core\BaseObject.
 * Generated by PHPUnit on 2011-09-01 at 11:24:52.
 * @requires
 */
class ConfigTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \Wootook\Core\App\App
     */
    protected $_app;

    /**
     * @var \Wootook\Core\Config\Node
     */
    protected $_config;

    /**
     * @var \Wootook\Core\DependencyInjection\Registry
     */
    protected $_registry;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_app = $this->getMock('Wootook\\Core\\App\\App', array('__construct'), array(''));
        $this->_registry = new \Wootook\Core\DependencyInjection\Registry($this->_app);
    }

    public function testGetRegistryWhilePassedToConstructor()
    {
        $object = new \Wootook\Core\DependencyInjection\Factory($this->_app, $this->_registry);

        $this->assertAttributeSame($this->_registry, '_registry', $object);
        $this->assertSame($object->getRegistry(), $this->_registry);
    }

    public function testGetClassDefinition_usingSpecialClassName()
    {
        $object = new \Wootook\Core\DependencyInjection\Factory($this->_app, $this->_registry, 'stdClass');

        $this->assertInstanceOf('stdClass', $object->getClassDefinition('stdClass'));
    }

    public function testGetRegistryWhileNonePassedToConstructor()
    {
        $object = new \Wootook\Core\DependencyInjection\Factory($this->_app);

        $this->assertInstanceOf('Wootook\\Core\\DependencyInjection\\Registry', $object->getRegistry());
        $this->assertAttributeNotEmpty('_registry', $object);
        $this->assertAttributeNotSame($this->_registry, '_registry', $object);

        $object->setRegistry($this->_registry);

        $this->assertAttributeSame($this->_registry, '_registry', $object);
        $this->assertSame($object->getRegistry(), $this->_registry);
    }

    public function testGetUndeclaredClassDefinition()
    {
        $object = new \Wootook\Core\DependencyInjection\Factory($this->_app, $this->_registry);

        $this->assertInstanceOf('Wootook\\Core\\DependencyInjection\\Definition\\ClassDefinition', $object->getClassDefinition('stdClass'));
    }

    public function testGetDeclaredClassDefinition()
    {
        $object = new \Wootook\Core\DependencyInjection\Factory($this->_app, $this->_registry);

        $classDefinition = $this->getMockBuilder('Wootook\\Core\\DependencyInjection\\Definition\\ClassDefinition')
            ->disableOriginalConstructor()
            ->getMock()
        ;

        $object->registerClassDefinition('stdClass', $classDefinition);

        $this->assertInstanceOf('Wootook\\Core\\DependencyInjection\\Definition\\ClassDefinition', $object->getClassDefinition('stdClass'));
    }

    public function testAddClassDefinition()
    {
        $classDefinition = $this->getMockBuilder('Wootook\\Core\\DependencyInjection\\Definition\\ClassDefinition')
            ->disableOriginalConstructor()
            ->getMock()
        ;

        $object = $this->getMockBuilder('Wootook\\Core\\DependencyInjection\\Factory')
            ->disableOriginalConstructor()
            ->setMethods(array('initClassDefinition', 'registerClassDefinition'))
            ->getMock()
        ;

        $object->expects($this->once())
            ->method('initClassDefinition')
            ->with('stdClass')
            ->will($this->returnValue($classDefinition))
        ;

        $object->expects($this->once())
            ->method('registerClassDefinition')
            ->with('stdClass', $classDefinition)
            ->will($this->returnSelf())
        ;

        $object->addClassDefinition('stdClass');
    }

    public function testInstanceInvocation()
    {
        $classDefinition = $this->getMockBuilder('Wootook\\Core\\DependencyInjection\\Definition\\ClassDefinition')
            ->disableOriginalConstructor()
            ->setMethods(array('newInstance'))
            ->getMock()
        ;

        $classDefinition->expects($this->once())
            ->method('newInstance')
            ->with(array())
            ->will($this->returnValue(new \stdClass))
        ;

        $object = $this->getMockBuilder('Wootook\\Core\\DependencyInjection\\Factory')
            ->disableOriginalConstructor()
            ->setMethods(array('getClassDefinition'))
            ->getMock()
        ;

        $object->expects($this->once())
            ->method('getClassDefinition')
            ->with('stdClass')
            ->will($this->returnValue($classDefinition))
        ;

        $object('stdClass');
    }
}
