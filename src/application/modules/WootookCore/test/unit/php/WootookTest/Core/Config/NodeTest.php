<?php

require_once 'Wootook/Core/Config/Node.php';
require_once 'Wootook/Core/Exception/CoreException.php';
require_once 'Wootook/Core/Exception/RuntimeException.php';

/**
 * Test class for Wootook\Core\DateTime.
 * Generated by PHPUnit on 2011-09-01 at 11:24:52.
 */
class WootookTest_Core_Config_NodeTest extends PHPUnit_Framework_TestCase
{
    public function testCreateEmptyWithoutParent()
    {
        $object = new Wootook\Core\Config\Node();
        $this->assertAttributeEmpty('_children', $object);
        $this->assertAttributeEquals(null, '_parent', $object);
    }

    public function testCreateEmptyWithoutParentCheckInitMethodCallWithInitialData()
    {
        $dataItems = array(
            'first-child'  => 1,
            'second-child' => 2,
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $mock = $this->getMock('Wootook\\Core\\Config\\Node', array('__construct', '_init'), array($dataItems), '', false);

        $mock->expects($this->once())
            ->method('_init')
            ->with($this->equalTo($dataItems))
        ;

        $mock->__construct($dataItems);
        $this->assertAttributeNotEmpty('_children', $mock);
    }

    public function testCreateEmptyWithParent()
    {
        $parent = new Wootook\Core\Config\Node();
        $object = new Wootook\Core\Config\Node(array(), $parent);

        $this->assertAttributeEmpty('_children', $object);
        $this->assertAttributeEquals($parent, '_parent', $object);
        $this->assertEquals($parent, $object->getParent());
    }

    public function testDirectChildAccessWithObjectNotation()
    {
        $object = new Wootook\Core\Config\Node();

        $object->testingAttribute = 'testing random data';
        $this->assertAttributeEquals(array('testing-attribute' => 'testing random data'), '_children', $object);

        $this->assertEquals('testing random data', $object->testingAttribute);

        $this->assertEquals(true, isset($object->testingAttribute));

        unset($object->testingAttribute);
        $this->assertAttributeEmpty('_children', $object);
    }

    public function testDirectChildAccessWithArrayNotation()
    {
        $object = new Wootook\Core\Config\Node();

        $object['testing-attribute'] = 'testing random data';
        $this->assertAttributeEquals(array('testing-attribute' => 'testing random data'), '_children', $object);

        $this->assertEquals('testing random data', $object['testing-attribute']);

        $this->assertEquals(true, isset($object['testing-attribute']));

        unset($object['testing-attribute']);
        $this->assertAttributeEmpty('_children', $object);
    }

    public function testDirectChildSettingArrayNotationWithoutKey()
    {
        $object = new Wootook\Core\Config\Node();

        $object[] = 'testing random data';
        $this->assertAttributeEquals(array('testing random data'), '_children', $object);
    }

    public function testDirectChildGettingArrayNotationKeyNotExists()
    {
        $object = new Wootook\Core\Config\Node();

        $this->assertEquals(null, $object['inexistent']);
    }

    public function testSwitchingArrayNotationToObjectNotation()
    {
        $object = new Wootook\Core\Config\Node();

        $object['testing-attribute'] = 'testing random data';
        $this->assertEquals('testing random data', $object->testingAttribute);

        $this->assertEquals(true, isset($object->testingAttribute));

        unset($object->testingAttribute);
        $this->assertAttributeEmpty('_children', $object);
    }

    public function testSwitchingObjectNotationToArrayNotation()
    {
        $object = new Wootook\Core\Config\Node();

        $object->testingAttribute = 'testing random data';
        $this->assertEquals('testing random data', $object['testing-attribute']);

        $this->assertEquals(true, isset($object['testing-attribute']));

        unset($object['testing-attribute']);
        $this->assertAttributeEmpty('_children', $object);
    }

    public function testGetConfigByPath()
    {
        $parent = new Wootook\Core\Config\Node();
        $object = new Wootook\Core\Config\Node(array(), $parent);

        $parent->superChild = $object;
        $object->testingAttribute = 'testing random data';

        $this->assertEquals('testing random data', $parent->getConfig('super-child/testing-attribute'));
    }

    public function testGetConfigAsArray()
    {
        $parent = new Wootook\Core\Config\Node();
        $object = new Wootook\Core\Config\Node(array(), $parent);

        $parent->superChild = $object;
        $object->testingAttribute = 'testing random data';

        $this->assertEquals(array('super-child' => array('testing-attribute' => 'testing random data')), $parent->toArray());
    }

    public function testCount()
    {
        $object = new Wootook\Core\Config\Node(array(
            'first-child'  => 1,
            'second-child' => 2,
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        ));

        $this->assertCount(4, $object);
    }

    protected function _getIteratorMock($class, $dataItems, $useKeys = false)
    {
        $mock = $this->getMock($class, array(), array($dataItems));

        $callCounter = 0;
        $mock->expects($this->at($callCounter++))
            ->method('rewind')
        ;
        foreach ($dataItems as $dataKey => $dataValue) {
            $mock->expects($this->at($callCounter++))
                ->method('valid')
                ->will($this->returnValue(true))
            ;

            $mock->expects($this->at($callCounter++))
                ->method('current')
                ->will($this->returnValue($dataValue))
            ;

            if ($useKeys === true) {
                $mock->expects($this->at($callCounter++))
                    ->method('key')
                    ->will($this->returnValue($dataKey))
                ;
            }
            $mock->expects($this->at($callCounter++))
                ->method('next')
            ;
        }
        $mock->expects($this->at($callCounter))
            ->method('valid')
            ->will($this->returnValue(false))
        ;

        return $mock;
    }

    /**
     * @covers Wootook\Core\Config\Node::rewind
     * @covers Wootook\Core\Config\Node::valid
     * @covers Wootook\Core\Config\Node::current
     * @covers Wootook\Core\Config\Node::next
     */
    public function testIteratorOneItemWithoutKey()
    {
        $dataItems = array(
            'first-child'  => 1,
        );

        $mock = $this->_getIteratorMock('Wootook\\Core\\Config\\Node', $dataItems);

        $counter = 0;
        foreach ($mock as $value) {
            $counter++;
        }

        $this->assertEquals(1, $counter);
    }

    /**
     * @covers Wootook\Core\Config\Node::rewind
     * @covers Wootook\Core\Config\Node::valid
     * @covers Wootook\Core\Config\Node::key
     * @covers Wootook\Core\Config\Node::current
     * @covers Wootook\Core\Config\Node::next
     */
    public function testIteratorOneItemWithKey()
    {
        $dataItems = array(
            'first-child'  => 1,
        );

        $mock = $this->_getIteratorMock('Wootook\\Core\\Config\\Node', $dataItems, true);

        $counter = 0;
        foreach ($mock as $key => $value) {
            $counter++;
        }

        $this->assertEquals(1, $counter);
    }

    /**
     * @covers Wootook\Core\Config\Node::rewind
     * @covers Wootook\Core\Config\Node::valid
     * @covers Wootook\Core\Config\Node::current
     * @covers Wootook\Core\Config\Node::next
     */
    public function testIteratorMultipleItemsWithoutKey()
    {
        $dataItems = array(
            'first-child'  => 1,
            'second-child' => 2,
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $mock = $this->_getIteratorMock('Wootook\\Core\\Config\\Node', $dataItems);

        $counter = 0;
        foreach ($mock as $value) {
            $counter++;
        }

        $this->assertEquals(4, $counter);
    }

    /**
     * @covers Wootook\Core\Config\Node::rewind
     * @covers Wootook\Core\Config\Node::valid
     * @covers Wootook\Core\Config\Node::key
     * @covers Wootook\Core\Config\Node::current
     * @covers Wootook\Core\Config\Node::next
     */
    public function testIteratorMultipleItemsWithKey()
    {
        $dataItems = array(
            'first-child'  => 1,
            'second-child' => 2,
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $mock = $this->_getIteratorMock('Wootook\\Core\\Config\\Node', $dataItems, true);

        $counter = 0;
        foreach ($mock as $key => $value) {
            $counter++;
        }

        $this->assertEquals(4, $counter);
    }

    /**
     * @covers Wootook\Core\Config\Node::rewind
     * @covers Wootook\Core\Config\Node::valid
     * @covers Wootook\Core\Config\Node::key
     * @covers Wootook\Core\Config\Node::current
     * @covers Wootook\Core\Config\Node::next
     */
    public function testIterator()
    {
        $dataItems = array(
            'first-child'  => 1,
            'second-child' => 2,
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $mock = new Wootook\Core\Config\Node($dataItems);

        $counter = 0;
        reset($dataItems);
        foreach ($mock as $key => $value) {
            $this->assertEquals(key($dataItems), $key);
            $this->assertEquals(current($dataItems), $value);
            next($dataItems);
            $counter++;
        }

        $this->assertEquals(4, $counter);
    }

    public function testTwoLevelsHierarchyInitializationWithPathRequest()
    {
        $dataItems = array(
            'first-child'  => 1,
            'second-child' => array(
                'first-sub-child' => 1,
                'second-sub-child' => 1,
            ),
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $mock = new Wootook\Core\Config\Node($dataItems);
        $this->assertInstanceOf('Wootook\\Core\\Config\\Node', $mock->getConfig('second-child'));
        $this->assertEquals(1, $mock->getConfig('second-child/second-sub-child'));
    }

    public function testTwoLevelsHierarchyInitializationWithInexistentPathRequest()
    {
        $dataItems = array(
            'first-child'  => 1,
            'second-child' => array(
                'first-sub-child' => 1,
                'second-sub-child' => 1,
            ),
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $mock = new Wootook\Core\Config\Node($dataItems);
        $this->assertEquals(null, $mock->getConfig('second-child/third-inexisting-sub-child'));
    }

    public function testTwoLevelsHierarchyInitializationTooDeepPathRequest()
    {
        $dataItems = array(
            'first-child'  => 1,
            'second-child' => array(
                'first-sub-child' => 1,
                'second-sub-child' => 1,
            ),
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $mock = new Wootook\Core\Config\Node($dataItems);
        $this->setExpectedException('Wootook\\Core\\Exception\\RuntimeException');
        $mock->getConfig('second-child/second-sub-child/inexistent-depth-child');
    }

    public function testClone()
    {
        $dataItems = array(
            'first-child'  => 1,
            'second-child' => array(
                'first-sub-child' => 1,
                'second-sub-child' => 1,
            ),
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $object = new Wootook\Core\Config\Node($dataItems);
        $clone = clone $object;
        $this->assertEquals($dataItems, $clone->toArray());
    }

    public function testUseNumericAttribute()
    {
        $object = new Wootook\Core\Config\Node();
        $object->{1} = 'first-child';
        $this->assertEquals('first-child', $object->{1});
        $this->assertEquals(array(1 => 'first-child'), $object->toArray());
    }

    public function testMergeConfigs()
    {
        $rootDataItems = array(
            'first-child'  => 1,
            'second-child' => array(
                'first-sub-child' => 1,
                'second-sub-child' => 2,
            ),
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );
        $secondaryDataItems = array(
            'second-sub-child' => 3,
            'third-sub-child' => '72',
            'fourth-sub-child' => array(
                'random-level-child' => 54
            ),
        );
        $expectedDataItems = array(
            'first-child'  => 1,
            'second-child' => array(
                'first-sub-child' => 1,
                'second-sub-child' => 3,
                'third-sub-child' => '72',
                'fourth-sub-child' => array(
                    'random-level-child' => 54
                ),
            ),
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $root = new Wootook\Core\Config\Node($rootDataItems);
        $secondary = new Wootook\Core\Config\Node($secondaryDataItems);
        $root->secondChild->merge($secondary);
        $this->assertEquals($expectedDataItems, $root->toArray());
    }

    public function testResetConfig()
    {
        $dataItems = array(
            'first-child'  => 1,
            'second-child' => array(
                'first-sub-child' => 1,
                'second-sub-child' => 2,
            ),
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $object = new Wootook\Core\Config\Node($dataItems);
        $object->reset();
        $this->assertEmpty($object->toArray());
    }

    public function testSetConfig()
    {
        $dataItems = array(
            'first-child'  => 1,
            'second-child' => array(
                'first-sub-child' => 1,
                'second-sub-child' => 3,
                'third-sub-child' => '72',
                'fourth-sub-child' => array(
                    'random-level-child' => 54
                ),
            ),
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $expected = array(
            'first-child'  => 1,
            'second-child' => array(
                'first-sub-child' => 1,
                'second-sub-child' => 3,
                'third-sub-child' => '72',
                'fourth-sub-child' => array(
                    'random-level-child' => 72
                ),
            ),
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $object = new Wootook\Core\Config\Node($dataItems);
        $object->setConfig('second-child/fourth-sub-child/random-level-child', 72);
        $this->assertEquals($expected, $object->toArray());
    }

    public function testSetConfigExpectError()
    {
        $dataItems = array(
            'first-child'  => 1,
            'second-child' => array(
                'first-sub-child' => 1,
                'second-sub-child' => 3,
                'third-sub-child' => '72',
                'fourth-sub-child' => array(
                    'random-level-child' => 54
                ),
            ),
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $expected = array(
            'first-child'  => 1,
            'second-child' => array(
                'first-sub-child' => 1,
                'second-sub-child' => 3,
                'third-sub-child' => '72',
                'fourth-sub-child' => array(
                    'random-level-child' => 72
                ),
            ),
            '3rd-child'    => '3rd',
            'fourth-child' => '4th'
        );

        $object = new Wootook\Core\Config\Node($dataItems);
        $this->setExpectedException('Wootook\\Core\\Exception\\RuntimeException');
        $object->setConfig('second-child/third-sub-child/random-inexisting-level-child', 72);
    }
}
