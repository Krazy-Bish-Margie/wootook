<?php

require_once 'Wootook/Core/DateTime/DateTime.php';

/**
 * Test class for Wootook\Core\DateTime\DateTime.
 * Generated by PHPUnit on 2011-09-01 at 11:24:52.
 */
class WootookTest_Core_DateTime_DateTimeTest extends PHPUnit_Framework_TestCase
{
    public function testTimestamp()
    {
        $object = new Wootook\Core\DateTime\DateTime();

        // 2012-06-05 05:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338874542');
        $this->assertEquals(1338874542, $object->getTimestamp());

        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');
        $this->assertEquals(1338906942, $object->getTimestamp());
    }

    public function testParseStringGeneralDatabaseMySqlDateTimeFormat()
    {
        // 2012-06-05 05:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('2012-06-05 05:35:42', 'Y-m-d H:i:s');
        $this->assertEquals(1338874542, $object->getTimestamp());

        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('2012-06-05 14:35:42', 'Y-m-d H:i:s');
        $this->assertEquals(1338906942, $object->getTimestamp());

        // 2012-06-05 00:00:00 +000
        $object = new Wootook\Core\DateTime\DateTime('2012-06-05 02:35:42', 'Y-m-d');
        $this->assertEquals(1338854400, $object->getTimestamp());
    }

    public function testParseStringGeneralDatabaseIsoDateTimeFormat()
    {
        // 2012-06-05 05:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('2012-06-05T05:35:42', 'Y-m-d\\TH:i:s');
        $this->assertEquals(1338874542, $object->getTimestamp());

        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('2012-06-05T14:35:42', 'Y-m-d\\TH:i:s');
        $this->assertEquals(1338906942, $object->getTimestamp());

        // 2012-06-05 00:00:00 +000
        $object = new Wootook\Core\DateTime\DateTime('2012-06-05 02:35:42', 'Y-m-d');
        $this->assertEquals(1338854400, $object->getTimestamp());
    }

    public function testParseStringAmPmWhenAm()
    {
        // 2012-06-05 05:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('2012-06-05 05:35:42 AM', 'Y-m-d h:i:s A');
        $this->assertEquals(1338874542, $object->getTimestamp());

        // 2012-06-05 05:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('2012-06-05 05:35:42 am', 'Y-m-d h:i:s a');
        $this->assertEquals(1338874542, $object->getTimestamp());
    }

    public function testParseStringAmPmWhenPm()
    {
        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('2012-06-05 02:35:42 PM', 'Y-m-d h:i:s A');
        $this->assertEquals(1338906942, $object->getTimestamp());

        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('2012-06-05 02:35:42 pm', 'Y-m-d h:i:s a');
        $this->assertEquals(1338906942, $object->getTimestamp());
    }

    public function testParseStringShortLiteralDaysMonths()
    {
        // 2012-06-05 00:00:00 +000
        $object = new Wootook\Core\DateTime\DateTime('Tue Jun 5, 2012', 'D M j, Y');
        $this->assertEquals(1338854400, $object->getTimestamp());
    }

    public function testParseStringLongLiteralDaysMonthsWithErrors()
    {
        // 2012-06-05 00:00:00 +000
        $object = new Wootook\Core\DateTime\DateTime('Tuesday June 5, 2012', 'D M j, Y');
        $this->assertEquals(1338854400, $object->getTimestamp());
    }

    public function testParseStringLongLiteralDaysMonthsWithTypoError()
    {
        // 2012-06-05 00:00:00 +000
        $object = new Wootook\Core\DateTime\DateTime('Tusday Jume 5, 2012', 'D M j, Y');
        $this->assertAttributeNotEquals(1338854400, '_datetime', $object);
    }

    public function testParseStringLiteralDaysMonthsAmPm()
    {
        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('Tue Jun 5, 2012 02:35:42 pm', 'D M j, Y H:i:s a');
        $this->assertEquals(1338906942, $object->getTimestamp());
    }

    public function testToStringLiteralDaysMonths()
    {
        // 2012-06-05 02:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');
        $this->assertEquals('Tue Jun 5, 2012 02:35:42 pm', $object->toString('D M j, Y h:i:s a'));
    }

    public function testToStringGeneral()
    {
        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');
        $this->assertEquals('2012-06-05 14:35:42', $object->toString('Y-m-d H:i:s'));
    }

    public function testToStringIso8601()
    {
        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');
        $this->assertEquals('2012-06-05T14:35:42+0000', $object->getIso());
    }

    public function testDateOperations()
    {
        $this->markTestSkipped();
        return;

        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');
        $object->add(10, Wootook\Core\DateTime\DateTime::SECOND);
        $this->assertEquals('2012-06-05 14:35:52', $object->toString('Y-m-d H:i:s'));

        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');
        $object->add(70, Wootook\Core\DateTime\DateTime::SECOND);
        $this->assertEquals('2012-06-05 14:36:52', $object->toString('Y-m-d H:i:s'));

        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');
        $object->sub(10, Wootook\Core\DateTime\DateTime::MINUTE);
        $this->assertEquals('2012-06-05 14:25:42', $object->toString('Y-m-d H:i:s'));

        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');
        $object->sub(70, Wootook\Core\DateTime\DateTime::MINUTE);
        $this->assertEquals('2012-06-05 13:25:42', $object->toString('Y-m-d H:i:s'));

        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');
        $object->set(25, Wootook\Core\DateTime\DateTime::DAY);
        $this->assertEquals('2012-06-25 14:35:42', $object->toString('Y-m-d H:i:s'));

        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');
        // 2012-06-05 00:00:00 +000
        $object->set(1338854400, Wootook\Core\DateTime\DateTime::TIMESTAMP);
        $this->assertEquals('2012-06-05 00:00:00', $object->toString('Y-m-d H:i:s'));

        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');
        $object->add(3600, Wootook\Core\DateTime\DateTime::TIMESTAMP);
        $this->assertEquals('2012-06-05 15:35:42', $object->toString('Y-m-d H:i:s'));

        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');
        $object->sub(3600, Wootook\Core\DateTime\DateTime::TIMESTAMP);
        $this->assertEquals('2012-06-05 13:35:42', $object->toString('Y-m-d H:i:s'));
    }

    public function testDateDifference()
    {
        // 2012-06-05 14:35:42 +000
        $objectOne = new Wootook\Core\DateTime\DateTime('@1338906942');
        // 2012-06-05 00:00:00 +000
        $objectTwo = new Wootook\Core\DateTime\DateTime('@1338854400');

        $this->assertInstanceOf('DateInterval', $diff = $objectOne->diff($objectTwo));
        //$this->assertInstanceOf('Wootook\\Core\\DateTime\\DateInterval', $diff = $objectOne->diff($objectTwo));
        $this->assertEquals(0, $diff->y);
        $this->assertEquals(0, $diff->m);
        $this->assertEquals(0, $diff->d);
        $this->assertEquals(14, $diff->h);
        $this->assertEquals(35, $diff->i);
        $this->assertEquals(42, $diff->s);
        $this->assertEquals(1, $diff->invert);
        $this->assertEquals(0, $diff->days);
        /*
        $this->assertEquals(52542, $objectOne->diff($objectTwo, true));
        $this->assertEquals(-52542, $objectTwo->diff($objectOne, true));
        $this->assertEquals(0, $objectOne->diff($objectOne, true));
        */
    }

    public function testParseStringErrorMeridiem()
    {
        // 2012-06-05 05:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('2012-06-05 05:35:42 DX', 'Y-m-d h:i:s A');
        $this->assertEquals('2012-06-05 05:35:42', $object->toString('Y-m-d H:i:s'));
    }

    public function testParseStringShortYear()
    {
        // 2012-06-05 05:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('12-06-05 05:35:42', 'y-m-d h:i:s A');
        $this->assertEquals('2012-06-05 05:35:42', $object->toString('Y-m-d H:i:s'));

        // 1969-06-05 05:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('69-06-05 05:35:42', 'y-m-d h:i:s A');
        $this->assertEquals('1969-06-05 05:35:42', $object->toString('Y-m-d H:i:s'));
    }

    public function testDateEarlierLater()
    {
        // 2012-06-05 14:35:42 +000
        $objectOne = new Wootook\Core\DateTime\DateTime('@1338906942');
        // 2012-06-05 00:00:00 +000
        $objectTwo = new Wootook\Core\DateTime\DateTime('@1338854400');

        $this->assertFalse($objectOne->isEarlier($objectTwo));
        $this->assertFalse($objectTwo->isLater($objectOne));

        $this->assertFalse($objectTwo->isLater());
        $this->assertTrue($objectTwo->isEarlier());
    }

    public function testGetTimestamp()
    {
        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('2012-06-05 14:35:42', 'Y-m-d H:i:s');

        $this->assertEquals(1338906942, $object->getTimestamp());
    }

    public function testMagicMethodToString()
    {
        // 2012-06-05 14:35:42 +000
        $object = new Wootook\Core\DateTime\DateTime('@1338906942');

        $this->assertEquals('2012-06-05T14:35:42+00:00', $object.'');
    }
}
